" Comments in Vimscript start with `"`.

" If you open this file in Vim, it'll be syntax highlighted for you.

" Vim is based on Vi. Setting `nocompatible` switches from the default
" Vi-compatibility mode and enables useful Vim functionality. This
" configuration option turns out not to be necessary for the file named
" '~/.vimrc', because Vim automatically enters nocompatible mode if that file
" is present. But we're including it here just in case this config file is
" loaded some other way (e.g. saved as `foo`, and then Vim started with
" `vim -u foo`).
set nocompatible

" Turn on syntax highlighting.
syntax on

" Disable the default Vim startup message.
set shortmess+=I

" Show line numbers.
set number

" This enables relative line numbering mode. With both number and
" relativenumber enabled, the current line shows the true line number, while
" all other lines (above and below) are numbered relative to the current line.
" This is useful because you can tell, at a glance, what count is needed to
" jump up or down to a particular line, by {count}k to go up or {count}j to go
" down.
set relativenumber

" Always show the status line at the bottom, even if you only have one window open.
set laststatus=2

" The backspace key has slightly unintuitive behavior by default. For example,
" by default, you can't backspace before the insertion point set with 'i'.
" This configuration makes backspace behave more reasonably, in that you can
" backspace over anything.
set backspace=indent,eol,start

" By default, Vim doesn't let you hide a buffer (i.e. have a buffer that isn't
" shown in any window) that has unsaved changes. This is to prevent you from "
" forgetting about unsaved changes and then quitting e.g. via `:qa!`. We find
" hidden buffers helpful enough to disable this protection. See `:help hidden`
" for more information on this.
set hidden

" This setting makes search case-insensitive when all characters in the string
" being searched are lowercase. However, the search becomes case-sensitive if
" it contains any capital letters. This makes searching more convenient.
set ignorecase
set smartcase

" Enable searching as you type, rather than waiting till you press enter.
set incsearch

" Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.

" Disable audible bell because it's annoying.
set noerrorbells visualbell t_vb=

" Enable mouse support. You should avoid relying on this too much, but it can
" sometimes be convenient.
set mouse+=a

" Try to prevent bad habits like using the arrow keys for movement. This is
" not the only possible bad habit. For example, holding down the h/j/k/l keys
" for movement, rather than using more efficient movement commands, is also a
" bad habit. The former is enforceable through a .vimrc, while we don't know
" how to prevent the latter.
" Do this in normal mode...
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>
" ...and in insert mode
inoremap <Left>  <ESC>:echoe "Use h"<CR>
inoremap <Right> <ESC>:echoe "Use l"<CR>
inoremap <Up>    <ESC>:echoe "Use k"<CR>
inoremap <Down>  <ESC>:echoe "Use j"<CR>

" Set tabstop=4 instead of 8
set tabstop=4
set shiftwidth=4
set expandtab

" Simple mapping
:map \p i(<Esc>ea)<Esc>
:map \c i{<Esc>ea}<Esc>

" Folding
set foldmethod=indent
autocmd BufRead * normal zR

" Exploring using wildmenu
set wildmenu                    " Enable enchaned tab autocomplete
set wildmode=list:longest,full  " Complete till longest string then open wildmenu

" Searching
" set hlsearch    " Highlight every match when searching
set incsearch   " Move dynamically to first match asap

" Find Man page easily
:runtime! ftplugin/man.vim

" Manage plugins with vim-plug
call plug#begin()

Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'tpope/vim-vinegar'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mileszs/ack.vim'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/vim-plug'
Plug 'tpope/vim-fugitive'
Plug 'christoomey/vim-tmux-navigator'
let g:plug_timeout = 300 " Increase vim-plug timeout for YouCompleteMe
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
Plug 'tpope/vim-dispatch'
Plug 'w0rp/ale'

call plug#end()

" Install vim-plug if it's not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.github.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Load Documentation for each plugin
packloadall             " Load all plugins
silent! helptags ALL    " Load help files for all plugins

" Immediately add a closing quotes or braces in insert mode
inoremap ' ''<esc>i
inoremap " ""<esc>i
inoremap ( ()<esc>i
inoremap { {}<esc>i
inoremap [ []<esc>i

" Map the leader key to a spacebar
let mapleader = "\<space>"

" Plugin Functionality
noremap <leader>n :NERDTreeToggle<cr>
noremap <leader>p :CtrlP<cr>
noremap <leader>b :CtrlBuffer<cr>
noremap <leader>m :CtrlPMRU<cr>
noremap <leader>] :YcmCompleter GoTo<cr>

" Set CtrlP working dir to a repo root (with fallback to current dir)
" Hence only use CtrlP when .git is present in parent dir
let g:ctrlp_working_path_mode = 'ra'

" Use ctags to generate tags for codebase
set tags=tags;  " Look for a tags file recursively in parent dirs

" Regenerate tags when saving Python files
autocmd BufWritePost *.py silent! !ctags -R &
autocmd BufWritePost *.cpp *.h silent! !ctags -R &

" Navigating Terminal Windows more easily by removing Ctrl-w
tnoremap <c-j> <c-w><c-j>
tnoremap <c-k> <c-w><c-k>
tnoremap <c-l> <c-w><c-l>
tnoremap <c-h> <c-w><c-h>

" Making Vim my Ow"
" => Looks
colorscheme slate
